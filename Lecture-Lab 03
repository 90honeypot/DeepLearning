
# Lab 03 - Minimizing Cost (Linear Regression)

import tensorflow as tf
# to show graph
import matplotlib.pyplot as plt

# 1.
X = [1,2,3]
Y = [1,2,3]
W = tf.placeholder(tf.float32)

hypothesis = X * W
# cost/loss function
cost = tf.reduce_mean(tf.square(hypothesis - Y))
sess = tf.Session()
# initialize variables
sess.run(tf.global_variables_initializer())

W_val = []
cost_val = []
for i in range(-30, 50):
	# -3 < W < 5
	feed_W = i * 0.1
	curr_cost, curr_W = sess.run([cost, W], feed_dict={W: feed_W})
	W_val.append(curr_W)
	cost_val.append(curr_cost)
# Show graph
plt.plot(W_val, cost_val)
plt.show()


# 2.
x_data = [1,2,3]
y_data = [1,2,3]

W = tf.Variable(tf.random_normal([1]), name='weight')
X = tf.placeholder(tf.float32)
Y = tf.placeholder(tf.float32)

hypothesis = X*W

cost = tf.reduce_mean(tf.square(hypothesis - Y))
# Minimize: Gradient Descent using derivative: W -= learning_rate*derivative
learning_rate = 0.1
gradient = tf.reduce_mean((W*X - Y)*X)
descent = W - learning_rate * gradient
# put descent in W
update = W.assign(descent)

sess = tf.Session()
sess.run(tf.global_variables_initializer())
for step in range(21):
	sess.run(update, feed_dict={X: x_data, Y: y_data})
	print(step, sess.run(cost, feed_dict={X: x_data, Y: y_data}), sess.run(W))


# 3.
X = [1,2,3]
Y = [1,2,3]
W = tf.Variable(-3.0)

hypothesis = X * W
cost = tf.reduce_mean(tf.square(hypothesis-Y))

optimizer = tf.train.GradientDescentOptimizer(learning_rate=0.1)
train = optimizer.minimize(cost)

sess = tf.Session()
sess.run(tf.global_variables_initializer())

for step in range(100):
	print(step, sess.run(W))
	sess.run(train)


# 4. Optional : compute_gradient and apply_gradient

X = [1,2,3]
Y = [1,2,3]
W = tf.Variable(5.)

hypothesis = X*W
gradient = tf.reduce_mean((W * X - Y) * X) * 2

cost = tf.reduce_mean(tf.square(hypothesis - Y))
optimizer = tf.train.GradientDescentOptimizer(learning_rate=0.01)

# get gradients
gvs = optimizer.compute_gradients(cost)

# apply gradients
apply_gradients = optimizer.apply_gradients(gvs)

sess = tf.Session()
sess.run(tf.global_variables_initializer())

for step in range(100):
	print(step, sess.run([gradient, W, gvs]))
	sess.run(apply_gradients)
