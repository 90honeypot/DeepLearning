
# Lab 02 - Linear Regression

import tensorflow as tf

# 1.
# (1) Build graph
# X and Y data
x_train = [1,2,3]
y_train = [1,2,3]

# random_normal([shape])
# 'Variable' = "Trainable"
w = tf.Variable(tf.random_normal([1]), name = 'weight')
b = tf.Variable(tf.random_normal([1]), name = 'bias')

# Our hypothesis XW+b
hypothesis = x_train * w + b
# reduce_mean : average
cost = tf.reduce_mean(tf.square(hypothesis - y_train))
# Minimize
optimizer = tf.train.GradientDescentOptimizer(learning_rate=0.01)
train = optimizer.minimize(cost)

# (2) Run/update graph and get results
sess = tf.Session()
# Before 'Variable' is used, you need 'global_variables_initializer()'
sess.run(tf.global_variables_initializer())

# Fit the line
for step in range(2001):
	sess.run(train)
	if step % 20 == 0:
		print(step, sess.run(cost), sess.run(w), sess.run(b))


# 2.
# Use Placeholders

X = tf.placeholder(tf.float32)
Y = tf.placeholder(tf.float32)

w = tf.Variable(tf.random_normal([1]), name = 'weight')
b = tf.Variable(tf.random_normal([1]), name = 'bias')

hypothesis = X * w + b
cost = tf.reduce_mean(tf.square(hypothesis - Y))
optimizer = tf.train.GradientDescentOptimizer(learning_rate=0.01)
train = optimizer.minimize(cost)

sess = tf.Session()
sess.run(tf.global_variables_initializer())

for step in range(2001):
	cost_val, W_val, b_val, _ = sess.run([cost, w, b, train],
		feed_dict={X:[1,2,3,4,5], Y:[2.1,3.1,4.1,5.1,6.1]})
	if step % 20 == 0:
		print(step, cost_val, W_val, b_val)

print(sess.run(hypothesis, feed_dict={X:[5]}))
